import React, { useState } from "react";
import dummyPosts from "./dummyPosts";
import PostCard from "./PostCard";

const ForumPosts = () => {
  const postsPerPage = 6;
  const [posts, setPosts] = useState(dummyPosts);
  const [currentPage, setCurrentPage] = useState(1);

  // handleVote ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‚Äì ‡¶≠‡ßã‡¶ü ‡¶Ø‡ßã‡¶ó / ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
  const handleVote = (postId, type) => {
    // ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶∏‡¶¨ ‡¶™‡ßã‡¶∏‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    setPosts((prevPosts) =>
      prevPosts.map((post) => {
        // ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶á ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶ü‡¶æ‡¶á ‡¶π‡ßü ‡¶Ø‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø postId ‡¶è‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶®
        if (post._id === postId) {
          // ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶¨‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ (‡¶è‡¶ñ‡¶æ‡¶®‡ßá guest) ‡¶Ü‡¶ó‡ßá‡¶á vote ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ
          const alreadyUp = post.votes.up.includes("guest");
          const alreadyDown = post.votes.down.includes("guest");

          // ‡¶™‡ßÅ‡¶∞‡¶®‡ßã votes ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡¶™‡¶ø ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
          let updatedVotes = { ...post.votes };

          // ‡¶Ø‡¶¶‡¶ø "up" ‡¶≠‡ßã‡¶ü ‡¶¶‡ßá‡ßü
          if (type === "up") {
            if (alreadyUp) {
              // ‡¶Ü‡¶ó‡ßá‡¶á upvote ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßã
              updatedVotes.up = updatedVotes.up.filter((u) => u !== "guest");
            } else {
              // ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá upvote
              updatedVotes.up = [...updatedVotes.up, "guest"];

              // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á downvote ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶•‡¶æ‡¶ï‡ßá ‚Üí ‡¶∏‡ßá‡¶ü‡¶æ‡¶ì ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßã
              updatedVotes.down = updatedVotes.down.filter(
                (d) => d !== "guest"
              );
            }
          }

          // ‡¶Ø‡¶¶‡¶ø "down" ‡¶≠‡ßã‡¶ü ‡¶¶‡ßá‡ßü
          if (type === "down") {
            if (alreadyDown) {
              // ‡¶Ü‡¶ó‡ßá‡¶á downvote ‡¶¶‡¶ø‡¶≤‡ßá ‡¶è‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßá‡¶ü‡¶æ ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßã
              updatedVotes.down = updatedVotes.down.filter(
                (d) => d !== "guest"
              );
            } else {
              // ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá downvote
              updatedVotes.down = [...updatedVotes.down, "guest"];

              // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶ó‡ßá‡¶á upvote ‡¶¶‡¶ø‡ßü‡ßá ‡¶•‡¶æ‡¶ï‡ßá ‚Üí ‡¶∏‡ßá‡¶ü‡¶æ‡¶ì ‡¶§‡ßÅ‡¶≤‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßã
              updatedVotes.up = updatedVotes.up.filter((u) => u !== "guest");
            }
          }

          // ‡¶è‡¶á ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡¶ï‡ßá ‡¶®‡¶§‡ßÅ‡¶® vote ‡¶∏‡¶π ‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® ‡¶ï‡¶∞‡¶¨‡ßã
          return { ...post, votes: updatedVotes };
        }

        // ‡¶Ø‡ßá‡¶∏‡¶¨ ‡¶™‡ßã‡¶∏‡ßç‡¶ü‡ßá ‡¶≠‡ßã‡¶ü ‡¶¶‡¶ø‡¶á‡¶®‡¶ø, ‡¶∏‡ßá‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
        return post;
      })
    );
  };

  const totalPages = Math.ceil(posts.length / postsPerPage);
  const paginatedPosts = posts.slice(
    (currentPage - 1) * postsPerPage,
    currentPage * postsPerPage
  );

  return (
    <div className="max-w-3xl mx-auto py-6 px-4">
      <h1 className="text-2xl font-bold mb-4">üìñ Forum Posts</h1>

      {paginatedPosts.map((post) => (
        <PostCard key={post._id} post={post} onVote={handleVote} />
      ))}

      <div className="flex justify-center mt-6 space-x-2">
        {Array.from({ length: totalPages }, (_, i) => i + 1).map((num) => (
          <button
            key={num}
            className={`px-4 py-2 rounded-lg  ${
              num === currentPage ? "bg-blue-500 text-white" : "bg-gray-200"
            }`}
            onClick={() => setCurrentPage(num)}
          >
            {num}
          </button>
        ))}
      </div>
    </div>
  );
};

export default ForumPosts;
